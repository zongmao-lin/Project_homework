project1：实现sm3算法的生日碰撞攻击
用python编写代码，利用gmssl库中的sm3算法得到哈希值，再遍历进行生日碰撞攻击。
前8位碰撞10000次消耗时间 0.02092456817626953 seconds
前16位碰撞10000次消耗时间2.3340251445770264 seconds
前24位碰撞1000次消耗时间109.7734067440033 seconds，10次消耗时间为1.1992161273956299 seconds

project2：实现sm3算法的rho攻击
同样使用gmssl库，代码思路见注释，代码运行结果如下
攻击比特长度为8bit时：
消息一： da2d224ba4ae3cb0d89dfde2f1e20ae56ba055e41171335fcab77b34009974e2
消息二： f49df1d64e180e4c69e9b7e047cfce08935cb5009567be7a0b4737450250f046
碰撞值： fe
攻击时间: 0.764266 秒

攻击长度为16bit时：
消息一： da7904d65c0c754ddab321b61a02fc0730e5d4af1162887a1c8b9942bb10822b
消息二： 69e074b9b5cb79a249233272cab9e3a796878c52c5868d919bbbbb2907c9de95
碰撞值： f487
攻击时间: 159.533181 秒


project3：长度拓展攻击
原消息为happy，攻击信息为world，最后能得出hash值。


project9：软件实现SM4
一.密钥拓展
1.密钥扩展流程将128位（4个32位）的密钥拓展为32个32位的轮密钥。
2.待拓展密钥MK0-MK3（储存在key[4]中），生成的轮密钥存储在rk中
3.密钥拓展中使用4个常数，储存在FK[4]中
4.使用32个固定参数CKi，储存在CK[32]中
轮密钥生成方法为：
输入加密密钥MK=（MK0,MK1,MK2,MK3)，(K0,K1,K2,K3)=MK0⊕FK0,MK1⊕FK1,MK2⊕FK2,MK3⊕FK3)
For  i=0，1…,30，31 Do
rki=Ki+4=Ki⊕T’(Ki+1⊕Ki+2⊕Ki+3⊕CKi)
说明：T’变换与加密算法轮函数中的T基本相同，只将其中的线性变换L修改为L’(B)=B⊕(B<<<13)⊕(B<<<23)
二.合成置换T
第一步非线性变换部件τ：
1.把128bit明文分为4个32位字（X0,X1,X2,X3）
2.4个32位字并行输入到4个S盒中，S盒中输入的前半字节为行号，后半字节为列号，行列交叉点处的数据即为输出。
第二步线性变换部件L：
以非线性变换的输出B作为输入，设最终输出为C，则
C=L(B)=B⊕(B<<<2)⊕(B<<<10)⊕(B<<<18)⊕(B<<<24),（<<<为循环位移）
三.加解密
Xi+4=F（Xi，Xi+1，Xi+2，Xi+3，rki）（F为轮函数）
= Xi ⊕T（ Xi+1⊕ Xi+2⊕ Xi+3⊕rki)，( i = 0,1…31)
最终选择(X35,X34,X33,X32)作为输出
解密过程与加密过程一致，仅将轮密钥倒序使用即可。

代码正确性验证
将明文与主密钥设置为全0。其中明文设置为字符串0，即ASCⅡ码中的30；主密钥所有位设为0，测试代码后发现与加解密网站结果相同，正确性得到验证。

project10：ecdsa
细节见代码

project14：使用SM2实现PGP方案
思路见代码注释。

project15：使用真实网络通信实现SM2 2P签名
速录见代码。